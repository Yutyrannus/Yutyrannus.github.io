<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yutyrannus</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yutyrannus.github.io/"/>
  <updated>2017-06-20T18:18:12.690Z</updated>
  <id>http://yutyrannus.github.io/</id>
  
  <author>
    <name>Yutyrannus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ lambda 简单介绍</title>
    <link href="http://yutyrannus.github.io/2017/06/20/cpp_lambda/"/>
    <id>http://yutyrannus.github.io/2017/06/20/cpp_lambda/</id>
    <published>2017-06-20T15:21:49.000Z</published>
    <updated>2017-06-20T18:18:12.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lambda表达式简介"><a href="#lambda表达式简介" class="headerlink" title="lambda表达式简介"></a>lambda表达式简介</h1><p>lambda表达式即匿名函数，在各个语言中最大作用是少写一个函数名。毕竟取名是编程最让人头疼的事之一。</p>
<h1 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h1><p>C++11中引入了lambda表达式，即匿名函数。</p>
<p>完整表达式：<br><code>[capture](parameters) -&gt;return_type {body}</code></p>
<p>简单例子，foo函数作用为返回输入的加一的值：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> foo = [](<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)&#123;<span class="keyword">return</span> x + <span class="number">1</span>;&#125;;</div></pre></td></tr></table></figure></p>
<p>相当于js es6中的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="capture"><a href="#capture" class="headerlink" title="[capture]"></a>[capture]</h2><p>C++ lambda比一般函数强在有capture（捕获），因此可以代替std::bind。<br>捕获的形式：</p>
<ul>
<li><code>=</code> 值捕获，复制所有外面变量</li>
<li><code>&amp;</code> 引用捕获，引用所有外面变量</li>
<li><code>arg</code> 值捕获arg变量</li>
<li><code>&amp;arg</code> 引用捕获arg变量</li>
<li><code>arg1, &amp;arg2</code> 值捕获arg1变量，引用捕获arg2变量</li>
</ul>
<p>不推荐用<code>[=]</code>、<code>[&amp;]</code>这样把外面的变量都捕获，捕获要用到的变量就行。谨慎使用引用捕获。</p>
<p>值捕获会复制产生一份副本，这副本默认不可变，若想改变的话在<code>(parameters)</code>后面加上<code>mutable</code>。<br>比如值捕获x，返回x+1，这里不加mutable的话会编译出错：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">auto</span> foo = [x]() <span class="keyword">mutable</span> &#123;<span class="keyword">return</span> ++x;&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="parameters"><a href="#parameters" class="headerlink" title="(parameters)"></a>(parameters)</h2><p>parameters作为函数的参数。</p>
<h2 id="gt-return-type"><a href="#gt-return-type" class="headerlink" title="-&gt;return_type"></a>-&gt;return_type</h2><p>return_type是函数的返回类型，可以省略。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> foo = [](<span class="keyword">const</span> <span class="keyword">int</span>&amp; x) -&gt; <span class="keyword">int</span> &#123;<span class="keyword">return</span> x + <span class="number">1</span>;&#125;;</div></pre></td></tr></table></figure></p>
<p>是不是有点感觉像rust：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</div><div class="line">    x + <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="C-14"><a href="#C-14" class="headerlink" title="C++14"></a>C++14</h1><p>C++14中lambda的parameters（参数）的类型可以用auto，类似模板</p>
<p>下面例子中的sum函数可以对有迭代器的容器实例求和<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> sum = [](<span class="keyword">auto</span> v)&#123;<span class="keyword">return</span> accumulate(v.begin(), v.end(), <span class="number">0</span>);&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="C-17"><a href="#C-17" class="headerlink" title="C++17"></a>C++17</h1><p>待更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lambda表达式简介&quot;&gt;&lt;a href=&quot;#lambda表达式简介&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式简介&quot;&gt;&lt;/a&gt;lambda表达式简介&lt;/h1&gt;&lt;p&gt;lambda表达式即匿名函数，在各个语言中最大作用是少写一个函数名。
    
    </summary>
    
    
      <category term="C++, lambda" scheme="http://yutyrannus.github.io/tags/C-lambda/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习</title>
    <link href="http://yutyrannus.github.io/2016/05/20/ES6_learnig/"/>
    <id>http://yutyrannus.github.io/2016/05/20/ES6_learnig/</id>
    <published>2016-05-20T14:05:10.000Z</published>
    <updated>2017-06-20T16:19:54.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h1><p>ECMAScript 6</p>
<h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h1><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>ES5中可以用forEach循环<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myArray.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>for-of循环和forEach相比，能正确响应break、continue和return语句</strong></p>
<h2 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h2><p>遍历字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> chr <span class="keyword">of</span> <span class="string">"abcedfg"</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(chr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">quips</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"你好 "</span> + name + <span class="string">"!"</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"希望你能喜欢这篇介绍ES6的译文"</span>;</div><div class="line">  <span class="keyword">if</span> (name.startsWith(<span class="string">"X"</span>)) &#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">"你的名字 "</span> + name + <span class="string">"  首字母是X，这很酷！"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"我们下次再见！"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在生成器函数内部，有一种类似return的语法：关键字<code>yield</code>。<br>二者的区别是，普通函数只可以return一次，而生成器函数可以yield多次（当然也可以只yield一次）。<br>在生成器的执行过程中，遇到yield表达式立即暂停，后续可恢复执行状态。</p>
<h1 id="反撇号（-）"><a href="#反撇号（-）" class="headerlink" title="反撇号（`）"></a>反撇号（`）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#warning"</span>).html(<span class="string">`</span></div><div class="line">  &lt;h1&gt;小心！&gt;/h1&gt;</div><div class="line">  &lt;p&gt;未经授权打冰球可能受罚</div><div class="line">  将近<span class="subst">$&#123;maxPenalty&#125;</span>分钟。&lt;/p&gt;</div><div class="line">`);</div></pre></td></tr></table></figure>
<ul>
<li>支持多行</li>
<li><code>${name}</code>表示<code>name</code>的值</li>
<li>可使用转义符<code>\</code></li>
</ul>
<h1 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h1><p>待补充</p>
<p># </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h1&gt;&lt;p&gt;ECMAScript 6&lt;/p&gt;
&lt;h1 id=&quot;for-of循环&quot;&gt;&lt;a href=&quot;#for-of循环&quot; cla
    
    </summary>
    
    
      <category term="ES6" scheme="http://yutyrannus.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://yutyrannus.github.io/2016/05/18/My-New-Post/"/>
    <id>http://yutyrannus.github.io/2016/05/18/My-New-Post/</id>
    <published>2016-05-18T08:05:15.000Z</published>
    <updated>2016-05-18T08:10:05.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><ul>
<li>list1</li>
<li>list2</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;这是一个标题&quot;&gt;&lt;a href=&quot;#这是一个标题&quot; class=&quot;headerlink&quot; title=&quot;这是一个标
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yutyrannus.github.io/2016/05/18/hello-world/"/>
    <id>http://yutyrannus.github.io/2016/05/18/hello-world/</id>
    <published>2016-05-18T08:01:12.627Z</published>
    <updated>2016-05-18T08:01:12.630Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
